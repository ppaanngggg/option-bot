// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: account/v1/account.proto

package accountv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ppaanngggg/option-bot/proto/gen/account/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "account.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceCreateProcedure is the fully-qualified name of the AccountService's Create RPC.
	AccountServiceCreateProcedure = "/account.v1.AccountService/Create"
	// AccountServiceGetProcedure is the fully-qualified name of the AccountService's Get RPC.
	AccountServiceGetProcedure = "/account.v1.AccountService/Get"
	// AccountServiceListProcedure is the fully-qualified name of the AccountService's List RPC.
	AccountServiceListProcedure = "/account.v1.AccountService/List"
	// AccountServiceDeleteProcedure is the fully-qualified name of the AccountService's Delete RPC.
	AccountServiceDeleteProcedure = "/account.v1.AccountService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountServiceServiceDescriptor      = v1.File_account_v1_account_proto.Services().ByName("AccountService")
	accountServiceCreateMethodDescriptor = accountServiceServiceDescriptor.Methods().ByName("Create")
	accountServiceGetMethodDescriptor    = accountServiceServiceDescriptor.Methods().ByName("Get")
	accountServiceListMethodDescriptor   = accountServiceServiceDescriptor.Methods().ByName("List")
	accountServiceDeleteMethodDescriptor = accountServiceServiceDescriptor.Methods().ByName("Delete")
)

// AccountServiceClient is a client for the account.v1.AccountService service.
type AccountServiceClient interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewAccountServiceClient constructs a client for the account.v1.AccountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountServiceClient{
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+AccountServiceCreateProcedure,
			connect.WithSchema(accountServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+AccountServiceGetProcedure,
			connect.WithSchema(accountServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+AccountServiceListProcedure,
			connect.WithSchema(accountServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+AccountServiceDeleteProcedure,
			connect.WithSchema(accountServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	list   *connect.Client[v1.ListRequest, v1.ListResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Create calls account.v1.AccountService.Create.
func (c *accountServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls account.v1.AccountService.Get.
func (c *accountServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls account.v1.AccountService.List.
func (c *accountServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Delete calls account.v1.AccountService.Delete.
func (c *accountServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the account.v1.AccountService service.
type AccountServiceHandler interface {
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceCreateHandler := connect.NewUnaryHandler(
		AccountServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(accountServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetHandler := connect.NewUnaryHandler(
		AccountServiceGetProcedure,
		svc.Get,
		connect.WithSchema(accountServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceListHandler := connect.NewUnaryHandler(
		AccountServiceListProcedure,
		svc.List,
		connect.WithSchema(accountServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteHandler := connect.NewUnaryHandler(
		AccountServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(accountServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/account.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceCreateProcedure:
			accountServiceCreateHandler.ServeHTTP(w, r)
		case AccountServiceGetProcedure:
			accountServiceGetHandler.ServeHTTP(w, r)
		case AccountServiceListProcedure:
			accountServiceListHandler.ServeHTTP(w, r)
		case AccountServiceDeleteProcedure:
			accountServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.Create is not implemented"))
}

func (UnimplementedAccountServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.Get is not implemented"))
}

func (UnimplementedAccountServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.List is not implemented"))
}

func (UnimplementedAccountServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.Delete is not implemented"))
}
